{"version":3,"sources":["components/affix-component/affix.js","components/character-component/character.js","App.js","serviceWorker.js","index.js"],"names":["Affix","name","description","url","id","className","key","href","Character","faction","role","spec","race","gender","realm","score","App","props","getQueryName","event","setState","queryCharName","target","value","getCharInfo","preventDefault","axios","get","state","then","res","charInfo","data","charInfoFlag","catch","alert","result","affixes","affix_details","this","map","el","wowhead_url","type","onChange","onClick","class","active_spec_name","mythic_plus_scores","all","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.3e782710.chunk.js","sourcesContent":["import React from 'react';\r\nimport './affix-style.css'\r\n\r\nconst Affix = ({name, description, url, id}) => {\r\n    return (\r\n      <div className=\"affix-card\" key={id}>\r\n        <a className=\"affix-card-name\">{name}</a>\r\n        <a className=\"affix-card-description\">{description}</a>\r\n        <a className=\"affix-card-url\" href={url}>{`${url} \\n`}</a>\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  export default Affix;","import React from 'react';\r\nimport './character-style.css'\r\n\r\nconst Character = ({name, faction, role, spec, race, gender, realm, score}) => {\r\n    return (\r\n        <div className=\"character-info-section\">\r\n          <a className=\"character-info-section-name\">{`Character Name: ${name}`}</a>\r\n          <a className=\"character-info-section-faction\">{`Faction: ${faction}`}</a>\r\n          <a className=\"character-info-section-class\">{`Role: ${role}`}</a>\r\n          <a className=\"character-info-section-spec\">{`Active Spec: ${spec}`}</a>\r\n          <a className=\"character-info-section-race\">{`Race: ${race}`}</a>\r\n          <a className=\"character-info-section-gender\">{`Gender: ${gender}`}</a>\r\n          <a className=\"character-info-section-realm\">{`Realm: ${realm}`}</a>\r\n          <a className=\"character-info-section-score\">{`M+ score: ${score}`}</a>\r\n        </div>\r\n            \r\n    )\r\n  }\r\n  \r\n  export default Character;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport Affix from './components/affix-component/affix'\r\nimport Character from './components/character-component/character'\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      result: [],\r\n      queryCharName: '',\r\n      charInfoFlag: false,\r\n      charInfo: [],\r\n\r\n    }\r\n  }\r\n\r\n  getQueryName = (event) => {\r\n    this.setState({queryCharName: event.target.value});\r\n  }\r\n\r\n  getCharInfo = (event) => {\r\n    event.preventDefault();\r\n    axios.get(`https://raider.io/api/v1/characters/profile?region=eu&realm=twisting-nether&name=${this.state.queryCharName}&fields=mythic_plus_scores`)\r\n    .then(res => {\r\n      this.setState({charInfo: res.data,\r\n      charInfoFlag: !this.state.charInfoFlag});\r\n    })\r\n    .catch(() => {\r\n      if(this.state.charInfoFlag){\r\n        this.setState({charInfoFlag: !this.state.charInfoFlag});\r\n      }\r\n      alert('Character not found');\r\n    })\r\n  }\r\n\r\n  componentDidMount(){\r\n    axios.get('https://raider.io/api/v1/mythic-plus/affixes?region=eu&locale=en')\r\n    .then(res => {\r\n      const affixes = res.data.affix_details;\r\n      this.setState({ result: affixes})})\r\n\r\n  }\r\n  \r\n  render(){\r\n    const { result, charInfo, queryCharName, charInfoFlag } = this.state;\r\n    return (\r\n      <div className=\"main-page\">\r\n       <h1 className=\"main-title\">M+ Affixes for this week!</h1>\r\n        <div className=\"affix-box\">\r\n          {result.map(el => {\r\n            return (\r\n              <Affix \r\n                name={el.name}\r\n                description={el.description}\r\n                url={el.wowhead_url}\r\n                id={el.id}\r\n              />\r\n            )\r\n          })}\r\n        </div>\r\n        <form className=\"char-search-box\">\r\n          <a className=\"char-search-box-title\">Detailed character information</a>\r\n          <div className=\"char-search-form-elements\">\r\n              <input  \r\n                type=\"text\" \r\n                name=\"name\"\r\n                className=\"search-bar\"\r\n                value={queryCharName}\r\n                onChange={this.getQueryName} \r\n              />\r\n            <input  \r\n              type=\"submit\" \r\n              value=\"Search\"\r\n              className=\"submit-button\"\r\n              onClick={this.getCharInfo} \r\n            />\r\n          </div>\r\n        </form>\r\n        {charInfoFlag ? \r\n        <Character\r\n          name={charInfo.name}\r\n          faction={charInfo.faction}\r\n          role={charInfo.class}\r\n          spec={charInfo.active_spec_name}\r\n          race={charInfo.race}\r\n          gender={charInfo.gender}\r\n          realm={charInfo.realm}\r\n          score={charInfo.mythic_plus_scores.all}/>\r\n        :null}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}